package controllers;

import database.DBConnection;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Line;
import javafx.stage.Stage;
import tm.TodoTM;


import java.io.IOException;
import java.sql.*;
import java.util.Optional;

public class ToDoController {
    public Label lblWelcomeUser;
    public Pane subRoot;
    public TextField txtTaskName;
    public ListView<TodoTM> lstView;
    public Label lblUserId;
    public Label lblTaskName;
    public TextField txtUpdateDelete;
    public Button btnDelete;
    public Button btnUpdate;
    public AnchorPane root;
    public Line ln1;
    public Line ln4;
    public Line ln3;
    public Line ln2;
    public Button btnAddToList;

    public String selectedID = null;


    public void initialize(){
        lblWelcomeUser.setText("Hi " + LoginController.welcomeUser + " Welcome to ToDo List");
        lblUserId.setText("User ID : " + LoginController.userId);
        addTaskVisible(false);
        loadList();
        setDisableCommon(true);

        lstView.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<TodoTM>() {
            @Override
            public void changed(ObservableValue<? extends TodoTM> observable, TodoTM oldValue, TodoTM newValue) {
                setDisableCommon(false);
                addTaskVisible(false);

                TodoTM selectedItem = lstView.getSelectionModel().getSelectedItem();
                if(selectedItem == null){
                    return;
                }
                txtUpdateDelete.setText(selectedItem.getDescription());
                selectedID = selectedItem.getId();
            }
        });

    }

    public void setDisableCommon (boolean setDisability){
        btnUpdate.setDisable(setDisability);
        btnDelete.setDisable(setDisability);
        txtUpdateDelete.setDisable(setDisability);
    }


    public void btnAddToListOnAction(ActionEvent actionEvent) {
        insertToToDo();
        loadList();
    }

    public void btnLogOutOnAction(ActionEvent actionEvent) throws IOException {

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION,"Are You Sure You Want To Log Out?",ButtonType.YES,ButtonType.NO);

        Optional<ButtonType> buttonType = alert.showAndWait();
        if(buttonType.get().equals(ButtonType.YES)) {
            Parent parent = FXMLLoader.load(this.getClass().getResource("../view/LoginForm.fxml"));
            Scene scene = new Scene(parent);
            Stage primaryStage = (Stage) root.getScene().getWindow();
            primaryStage.setScene(scene);
            primaryStage.setTitle("Login Form");
            primaryStage.centerOnScreen();
        }
    }

    public void btnAddNewToDoOnAction(ActionEvent actionEvent) {

        lstView.getSelectionModel().clearSelection();
        setDisableCommon(true);
        addTaskVisible(true);
        txtUpdateDelete.clear();
    }

    public String autogeneratedId(){
        String toDoId = null;
        Connection connection = DBConnection.getInstance().getConnection();
        System.out.println(connection);
        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select id from todo order by id desc limit 1");

            boolean isExist = resultSet.next();
            if(isExist){
                toDoId = resultSet.getString(1);

                toDoId = toDoId.substring(1,toDoId.length());
                int intID = Integer.parseInt(toDoId);
                intID++;

                if(intID < 10){

                    toDoId = "T00" + intID;
                }else if(intID < 100){

                    toDoId = "T0" + intID;
                }else {

                    toDoId = "T" + intID;
                }

            }else{
                toDoId = "T001";
            }


        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
        return toDoId;
    }

    public void txtTaskNameOnAction(ActionEvent actionEvent) {
        insertToToDo();
        loadList();
    }
    public void insertToToDo(){
        String id = autogeneratedId();
        String description = txtTaskName.getText();
        String user_id = LoginController.userId;
        try {
            Connection connection = DBConnection.getInstance().getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement("insert into todo values(?,?,?)");
            preparedStatement.setObject(1,id);
            preparedStatement.setObject(2,description);
            preparedStatement.setObject(3,user_id);

            preparedStatement.executeUpdate();
            txtTaskName.clear();

        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }

    }
    public void addTaskVisible(boolean visibility){
        ln1.setVisible(visibility);
        ln2.setVisible(visibility);
        ln3.setVisible(visibility);
        ln4.setVisible(visibility);
        lblTaskName.setVisible(visibility);
        btnAddToList.setVisible(visibility);
        txtTaskName.setVisible(visibility);
    }

    public void loadList(){
        ObservableList<TodoTM> todos = lstView.getItems();
        todos.clear();
        Connection connection = DBConnection.getInstance().getConnection();
        try {
            PreparedStatement preparedStatement = connection.prepareStatement("select*from todo where user_id = ?");
            preparedStatement.setObject(1,LoginController.userId);

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()){
                String id = resultSet.getString(1);
                String description = resultSet.getString(2);
                String user_id = resultSet.getString(3);

                TodoTM object = new TodoTM(id,description,user_id);
                todos.add(object);

            }
            lstView.refresh();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }

    }

    public void btnDeleteOnAction(ActionEvent actionEvent) {
        Connection connection = DBConnection.getInstance().getConnection();
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION,"Do You Want To Delete This ToDo?",ButtonType.YES,ButtonType.NO);
        Optional<ButtonType> buttonType = alert.showAndWait();

        if(buttonType.get().equals(ButtonType.YES)) {
            try {
                PreparedStatement preparedStatement = connection.prepareStatement("delete from todo where id =?");
                preparedStatement.setObject(1, selectedID);

                preparedStatement.executeUpdate();
                loadList();
                txtUpdateDelete.clear();


            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }
        }
    }
    public void btnUpdateOnAction(ActionEvent actionEvent) {
        String selectedText = txtUpdateDelete.getText();
        Connection connection = DBConnection.getInstance().getConnection();
        try {
            PreparedStatement preparedStatement = connection.prepareStatement("update todo set description = ? where id = ?");
            preparedStatement.setObject(1,selectedText);
            preparedStatement.setObject(2,selectedID);

            preparedStatement.executeUpdate();
            txtUpdateDelete.clear();

            loadList();
            setDisableCommon(true);
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }

    }
}


